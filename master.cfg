# -*- python -*-
# ex: set filetype=python:

# Copyright 2019 RStudio, Inc.
# All rights reserved.
#
# Use of this source code is governed by a BSD 2-Clause
# license that can be found in the LICENSE_BSD file.

import os
import pathlib

import toolz
from buildbot.plugins import util, changes

from ursabot.hooks import UrsabotHook
from ursabot.utils import Config, Collection, any_of, has
from ursabot.changes import ChangeFilter, GitPoller, GitHubPullrequestPoller
from ursabot.workers import DockerLatentWorker
from ursabot.secrets import SecretInPass
from ursabot.formatters import (MarkdownFormatter, BenchmarkCommentFormatter,
                                CrossbowCommentFormatter)
from ursabot.reporters import (GitHubStatusPush, GitHubReviewPush,
                               GitHubCommentPush, ZulipStatusPush)
from ursabot.schedulers import AnyBranchScheduler, TryScheduler, ForceScheduler
from ursabot.builders import (UrsabotTest, CrossbowTrigger,
                              ArrowCppTest, ArrowCppCudaTest,
                              ArrowCppBenchmark, ArrowPythonTest,
                              ArrowCppCondaTest, ArrowPythonCondaTest,
                              ArrowPythonCudaTest, ArrowJavaTest,
                              ArrowGoTest)

# Read ursabot configuration from .toml files, export URSABOT_ENV='test' to use
# test environment. These configurations are merged upon each other, the
# merging order is default.toml <- $env.toml <- local.toml <-.secrets.toml
env = os.environ.get('URSABOT_ENV', 'test')
print(f'Loading environment: {env}')

conf = Config.load('default.yaml', f'{env}.yaml',
                   optionals=['local.yaml', '.secrets.yaml'])

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {
    'buildbotNetUsageData': None,
    'title': conf.title,
    'titleURL': conf.url,
    'buildbotURL': conf.url,
    'workers': [],
    'builders': [],
    'schedulers': [],
    'services': [],
    'change_source': [],
    'secretsProviders': [],
    'protocols': {'pb': {'port': conf.worker_port}},
    'db': {'db_url': conf.database_url},
    'www': {
        'port': conf.webui_port,
        'change_hook_dialects': {},
        'plugins': {
            'waterfall_view': {},
            'console_view': {},
            'grid_view': {}
        }
    }
}

# TODO(kszucs): create a Project abstraction to specify ursabot and arrow
# builders, schedulers, reporters in a cleaner fashion with support of enabling
# disabling each part

if conf.secrets.enabled:
    c['secretsProviders'].append(
        SecretInPass(
            passphrase=conf.secrets.get('passphrase'),
            dirname=pathlib.Path(conf.secrets.directory).expanduser()
        )
    )

############################## AUTHENTICATION ################################

if conf.auth.enabled:
    c['www']['auth'] = util.GitHubAuth(
        clientId=util.Interpolate(conf.auth.github.client_id),
        clientSecret=util.Interpolate(conf.auth.github.client_secret),
        apiVersion=4,
        getTeamsMembership=True
    )
    c['www']['authz'] = util.Authz(
        # 'admin' organization is unavalable on github so it is used to grant
        # access for specific users outside of allowed organizations
        allowRules=[
            util.AnyControlEndpointMatcher(role=org)
            for org in conf.auth.roles.admin.orgs + ['admin']
        ],
        roleMatchers=[
            # github organization names becomes the roles assigned to the user
            util.RolesFromGroups(),
            # explicitly assign admin role to specific users
            util.RolesFromUsername(
                roles=['admin'],
                usernames=conf.auth.roles.admin.users
            )
        ]
    )

################################ HOOKS ########################################
# Accept HTTP requests and translate them into changes for buildbot. We use a
# specialized hook which also processes the pull request comments.

if conf.hooks.github.enabled:
    c['www']['change_hook_dialects']['github'] = {
        'class': UrsabotHook,
        'secret': util.Interpolate(conf.hooks.github.secret),
        'token': [
            util.Interpolate(token) for token in conf.hooks.github.tokens
        ],
        'debug': conf.hooks.github.debug,
        'strict': True,
        'verify': True
    }

################################ CHANGES ######################################
# The 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

if conf.changes.pb.enabled:
    c['change_source'].append(
        changes.PBChangeSource(
            port=conf.changes.pb.port,
            user=conf.changes.pb.user,
            passwd=conf.changes.pb.password
        )
    )

################################ WORKERS ######################################
# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password. The same
# worker name and password must be configured on the worker.

workers = Collection()

for worker in conf.workers:
    workers.append(
        DockerLatentWorker(
            f'{worker.name}-docker',
            password=None,
            arch=worker.arch,
            tags=worker.get('tags', []),
            max_builds=worker.get('max_builds', 1),
            image=util.Property('docker_image'),
            docker_host=worker.docker.host,
            masterFQDN=worker.docker.get('masterFQDN'),
            autopull=worker.docker.get('autopull', True),
            alwaysPull=worker.docker.get('alwayspull', True),
            hostconfig=util.Transform(
                toolz.merge,
                util.Property('docker_hostconfig', default={}),
                worker.docker.get('hostconfig', {})
            ),
            missing_timeout=worker.docker.get('missing_timeout', 120)
        )
    )

c['workers'].extend(workers)

################################ POLLERS ####################################
# Git and Pull request pollers are required only if no hooks are defined

ursabot_pollers = []
arrow_pollers = []

if conf.ursabot.poller.enabled:
    ursabot_pollers.extend([
        GitPoller(
            project=conf.ursabot.name,
            repourl=conf.ursabot.repo,
            branch='master',
            pollInterval=180
        ),
        GitHubPullrequestPoller(
            project=conf.ursabot.name,
            branches=['master'],
            pollInterval=180,
            magic_link=True,
            token=util.Interpolate(conf.ursabot.poller.token)
        )
    ])

if conf.arrow.poller.enabled:
    arrow_pollers.extend([
        GitPoller(
            project=conf.arrow.name,
            repourl=conf.arrow.repo,
            branch='master',
            pollInterval=180
        ),
        GitHubPullrequestPoller(
            project=conf.arrow.name,
            branches=['master'],
            pollInterval=180,
            magic_link=True,
            token=util.Interpolate(conf.arrow.poller.token)
        )
    ])

################################ BUILDERS #####################################
# The 'builders' list defines the Builders, which tell Buildbot how to perform
# a build: what steps, and which workers can execute them.  Note that any
# particular build will only take place on one worker.

ursabot_builders = UrsabotTest.builders_for(
    workers.filter(arch='amd64')
)
crossbow_builders = CrossbowTrigger.builders_for(
    workers.filter(arch='amd64'),
    env={
        'GIT_COMMITTER_NAME': 'ursabot',
        'GIT_COMMITTER_EMAIL': 'ursabot@ci.ursalabs.org'
    }
)

cuda_enabled_workers = workers.filter(tags=has('cuda'))

arrow_tests = (
    ArrowCppTest.builders_for(workers) +
    ArrowPythonTest.builders_for(workers) +
    ArrowCppCondaTest.builders_for(workers) +
    ArrowPythonCondaTest.builders_for(workers) +
    ArrowCppCudaTest.builders_for(cuda_enabled_workers) +
    ArrowPythonCudaTest.builders_for(cuda_enabled_workers) +
    ArrowJavaTest.builders_for(workers) +
    ArrowGoTest.builders_for(workers)
)

arrow_benchmarks = (
    ArrowCppBenchmark.builders_for(workers)
)

arrow_builders = (
    arrow_tests +
    arrow_benchmarks
)

print('Enabled builders:')
for builder in arrow_builders + arrow_benchmarks:
    print(f' - {builder}')

################################ SCHEDULERS ###################################
# Configure the Schedulers, which decide how to react to incoming changes.

ursabot_schedulers = [
    AnyBranchScheduler(
        name='Ursabot',
        change_filter=ChangeFilter(
            project=conf.ursabot.name,
        ),
        treeStableTimer=None,
        builders=ursabot_builders
    ),
    ForceScheduler(
        name='UrsabotForce',
        project=conf.ursabot.name,
        repository=conf.ursabot.repo,
        builders=ursabot_builders
    ),
    TryScheduler(
        name='UrsabotTry',
        port=conf.ursabot.schedulers['try'].port,
        userpass=conf.ursabot.schedulers['try'].userpass,
        builders=ursabot_builders
    )
]

arrow_schedulers = [
    AnyBranchScheduler(
        name='Arrow',
        change_filter=ChangeFilter(
            project=conf.arrow.name,
            # see docstring of ursabot.hooks.GithubHook
            category=any_of(None, 'tag', 'pull'),
        ),
        treeStableTimer=None,
        builders=arrow_tests
    ),
    AnyBranchScheduler(
        name='ArrowBuild',
        change_filter=ChangeFilter(
            project=conf.arrow.name,
            category='comment',
            properties={'command': 'build'}
        ),
        treeStableTimer=None,
        builders=arrow_tests
    ),
    AnyBranchScheduler(
        name='ArrowBenchmark',
        change_filter=ChangeFilter(
            # ensure that benchmarks are not triggered on every commit of every
            # pull request, see docstring of ursabot.hooks.GithubHook
            project=conf.arrow.name,
            category='comment',
            properties={'command': 'benchmark'}
        ),
        treeStableTimer=None,
        builders=arrow_benchmarks
    ),
    AnyBranchScheduler(
        name='CrossbowTrigger',
        change_filter=ChangeFilter(
            # ensure that benchmarks are not triggered on every commit of every
            # pull request, see docstring of ursabot.hooks.GithubHook
            project=conf.arrow.name,
            category='comment',
            properties={'command': 'crossbow'}
        ),
        treeStableTimer=None,
        builders=crossbow_builders
    ),
    # TODO(kszucs): specialize force scheduler, for example let the user
    # pass crossbow args for the crossbow-force scheduler
    ForceScheduler(
        name='ArrowForce',
        project=conf.arrow.name,
        repository=conf.arrow.repo,
        builders=arrow_builders + crossbow_builders
    ),
    TryScheduler(
        name='ArrowTry',
        port=conf.arrow.schedulers['try'].port,
        userpass=conf.arrow.schedulers['try'].userpass,
        builders=arrow_builders + crossbow_builders
    )
]

################################ REPORTERS ####################################
# There are multiple ways to present build status to various places e.g.
# to github as status push, reviews and/or comments.

ursabot_reporters = []
arrow_reporters = []

if conf.ursabot.reporters.github_status.enabled:
    ursabot_reporters.append(
        GitHubStatusPush(
            name='UrsabotStatusPush',
            tokens=[
                util.Interpolate(token) for token in
                conf.ursabot.reporters.github_status.tokens
            ],
            context=util.Interpolate('%(prop:buildername)s'),
            builders=ursabot_builders,
            debug=False,
            verbose=True,
            verify=True
        )
    )

if conf.arrow.reporters.github_status.enabled:
    arrow_reporters.append(
        GitHubStatusPush(
            name='ArrowStatusPush',
            tokens=[
                util.Interpolate(token) for token in
                conf.arrow.reporters.github_status.tokens
            ],
            context=util.Interpolate('%(prop:buildername)s'),
            builders=arrow_builders,
            debug=False,
            verbose=True,
            verify=True
        )
    )

if conf.arrow.reporters.github_review.enabled:
    arrow_reporters.append(
        GitHubReviewPush(
            name='ArrowReviewPush',
            tokens=[
                util.Interpolate(token) for token in
                conf.arrow.reporters.github_review.tokens
            ],
            context=util.Interpolate('%(prop:buildername)s'),
            builders=arrow_builders,
            dont_report_on={'started'},
            debug=False,
            verbose=True,
            verify=True
        )
    )

if conf.arrow.reporters.github_comment.enabled:
    arrow_reporters.extend([
        GitHubCommentPush(
            name='BenchmarkCommentPush',
            tokens=[
                util.Interpolate(token) for token in
                conf.arrow.reporters.github_comment.tokens
            ],
            formatter=BenchmarkCommentFormatter(),
            builders=arrow_benchmarks,
            report_on={'failure', 'exception', 'cancelled', 'success'},
            debug=False,
            verbose=True,
            verify=True
        ),
        GitHubCommentPush(
            name='CrossbowCommentPush',
            tokens=[
                util.Interpolate(token) for token in
                conf.arrow.reporters.github_comment.tokens
            ],
            formatter=CrossbowCommentFormatter(
                crossbow_repo='ursa-labs/crossbow',
            ),
            builders=crossbow_builders,
            report_on={'failure', 'exception', 'cancelled', 'success'},
            debug=False,
            verbose=True,
            verify=True
        )
    ])

if conf.arrow.reporters.zulip_status.enabled:
    arrow_reporters.append(
        ZulipStatusPush(
            organization=conf.arrow.reporters.zulip_status.organization,
            bot=conf.arrow.reporters.zulip_status.bot,
            apikey=conf.arrow.reporters.zulip_status.apikey,
            stream=conf.arrow.reporters.zulip_status.stream,
            formatter=MarkdownFormatter(),
            builders=arrow_builders + crossbow_builders,
            report_on={'failure', 'exception', 'cancelled'},
            debug=False,
            verbose=True,
            verify=True
        )
    )

################################ ADD PROJECTS #################################

if conf.ursabot.enabled:
    c['change_source'].extend(ursabot_pollers)
    c['builders'].extend(ursabot_builders)
    c['schedulers'].extend(ursabot_schedulers)
    c['services'].extend(ursabot_reporters)

if conf.arrow.enabled:
    c['change_source'].extend(arrow_pollers)
    c['builders'].extend(arrow_builders + crossbow_builders)
    c['schedulers'].extend(arrow_schedulers)
    c['services'].extend(arrow_reporters)
